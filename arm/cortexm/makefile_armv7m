
$(info "!!!!THE CUR BOARD is $(board)")


BIN_PATH = bin/$(board)
OBJ_PATH = obj
CPU_TYPE = cortex-m3
ifeq ($(board),netduinoplus2)
	CPU_TYPE = cortex-m4
endif

$(info "!!!!THE CUR CPU_TYPE is $(CPU_TYPE)")

IMAGE := $(BIN_PATH)/armv7m.elf

PWD_TOOLCHAIN = /project/gcc/gcc-arm-none-eabi-10.3-2021.10/bin
CROSS_COMPILE = $(PWD_TOOLCHAIN)/arm-none-eabi-

CC = $(CROSS_COMPILE)gcc
LD = $(CROSS_COMPILE)ld
GDB = $(CROSS_COMPILE)gdb
OBJDUMP = $(CROSS_COMPILE)objdump
OBJCOPY = ${TOOL_CHAIN}objcopy
READELF = $(CROSS_COMPILE)readelf
LDFILE = src/platform/$(board)/plat.ld

CFLAGS		:= -Wall -g -fno-builtin -gdwarf-2 -gstrict-dwarf -mcpu=$(CPU_TYPE) -mthumb -nostartfiles  --specs=nosys.specs -std=c11 -O0 \
				-Isrc/include\
				-Isrc/armv7m\
				-Isrc/platform/$(board)\
				-Isrc/libs

$(info "!!!!THE CUR CFLAGS is $(CFLAGS)")

LDFLAGS		:= -g

all: $(IMAGE)
OBJS := src/armv7m/int_vector.o \
		src/armv7m/cm3.o \
		src/armv7m/os_stdio.o \
		src/armv7m/cm3_s.o \
		src/armv7m/main.o \
		src/platform/$(board)/cmsdk_uart.o 

include src/platform/$(board)/menu_config.mk
include src/platform/$(board)/platform.mk
include src/rtos/evolution/evolution.mk
include src/libs/libs.mk
include src/cmsis/cmsis.mk


$(IMAGE): $(LDFILE)  $(OBJS)
	$(LD)  $(OBJS) -T $(LDFILE) -o $(IMAGE)
	$(OBJDUMP) -d $(IMAGE) > $(BIN_PATH)/armv7m.list
	$(OBJDUMP) -t $(IMAGE) | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(BIN_PATH)/armv7m.sym
	$(READELF) -A $(IMAGE)

%.o:%.c
	${CC} $(CFLAGS) -c -o $@ $<

%.o:%.s
	${CC} $(CFLAGS) -c -o $@ $<

dumpvmstate:
	qemu-system-arm -machine $(board) -cpu $(CPU_TYPE) \
	                    -m 1024 \
			    -nographic -serial mon:stdio \
	                    -kernel $(IMAGE) \
			    -dump-vmstate vmstate.json 

qemu:
	@qemu-system-arm -M ? | grep $(board) >/dev/null || exit
	qemu-system-arm -machine $(board) -cpu $(CPU_TYPE) \
			    -nographic -serial mon:stdio \
	                    -kernel $(IMAGE) 
			   
gdbserver:
	qemu-system-arm -machine $(board) -cpu $(CPU_TYPE) \
			    -nographic -serial mon:stdio \
	                    -kernel $(IMAGE) \
			    -S -s 
gdb: $(IMAGE)
	$(GDB) $^ -ex "target remote:1234"


gdbqemu:
	gdb --args qemu-system-arm -machine $(board) -cpu $(CPU_TYPE)  -m 4096  -nographic -serial mon:stdio -armv8m armv8m.elf


			    
clean:
	rm -rf $(BIN_PATH) $(OBJ_PATH)
.PHONY: all qemu clean
